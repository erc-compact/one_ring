
plugins {
    id 'nf-live-tracking@2.0.0'
}

params {
outputdir = "results" //Fill in the beam name here in production
}

live {
    enabled = true
    //file = "${params.outputdir}/PROGRESS"
    file = "/bscratch/vishnu/M28_PROCESSING/LIVE_PROGRESS/PROGRESS"
    overwrite = true
    interval = 5  // Interval in seconds for JSON dumps

}



params {

//Observation INFO
project = "COMPACT"
pipeline_name = "ACCEL_SEARCH"
telescope = "MeerKAT"
target = "M28"
files_to_search="${baseDir}/sample_file.txt"





filtool {
    rfi_filter = "kadaneF 8 4 zdot"
    zap_string = ""
    //(Any additional flags eg -scloffs)
    extra_args = ""
    telescope = "meerkat"
    filplan = ""
    time_decimation_factor = 1
    freq_decimation_factor = 1
    nbits = 8
    mean = 128
    std = 6
    threads = 20
    get_metadata = "${baseDir}/get_metadata.py"

}

// Define a list of configurations as a JSON string, each one corresponding to a peasoup run.
// A user can have one, or many. If only one is desired, provide a single map.
//cfg_name is output directory structure for publishing XML files
peasoup = '''
    [
      { "cfg_name"    : "full/ck00", 
        "fft_size": "100663296",
        "start_sample": "0",
        "nsamples": null,
        "acc_start": "-5.0",
        "acc_end": "5.0",
        "min_freq": "0.1",
        "max_freq": "1100.0",
        "dm_pulse_width": "64",
        "acc_pulse_width": "64",
        "min_snr": "8.0",
        "ram_limit_gb": "100.0",
        "nh": "5",
        "ngpus": "1",
        "total_cands": "100000",
        "accel_tol": 1.11,
        "birdie_list": null,
        "chan_mask": null,
        "extra_args": null
      },
      { 
        "cfg_name": "16m/ck00",
        "fft_size": "50331648",
        "start_sample": "0",
        "nsamples": null,
        "acc_start": "-10.0",
        "acc_end": "10.0",
         "min_freq": "0.1",
        "max_freq": "1100.0",
        "dm_pulse_width": "64",
        "acc_pulse_width": "64",
        "min_snr": "7.5",
        "ram_limit_gb": "50.0",
        "nh": "5",
        "ngpus": "1",
        "total_cands": "50000",
        "accel_tol": 1.11,
        "birdie_list": null,
        "chan_mask": null,
        "extra_args": null
      },
      {
        "cfg_name": "16m/ck01",
        "fft_size": "50331648",
        "start_sample": "50331648",
        "nsamples": null,
        "acc_start": "-10.0",
        "acc_end": "10.0",
        "min_freq": "0.1",
        "max_freq": "1100.0",
        "dm_pulse_width": "64",
        "acc_pulse_width": "64",
        "min_snr": "7.5",
        "ram_limit_gb": "50.0",
        "nh": "5",
        "ngpus": "1",
        "total_cands": "50000",
        "accel_tol": 1.11,
        "birdie_list": null,
        "chan_mask": null,
        "extra_args": null
      }
    ]
    '''
/* 
 * Dispersion Plan Definition (`dd_plan`)
 * 
 * FORMAT:
 * <coherent_dm>:<start_incoherent_dm>:<end_incoherent_dm>:<dm_step>:<tscrunch>
 *
 * Fields:
 * - coherent_dm        : Coherent dispersion measure used during recording.
 * - start_incoherent_dm: Starting DM to perform dedispersion.
 * - end_incoherent_dm  : Ending DM to perform dedispersion.
 * - dm_step            : Step size of DM trials.
 * - tscrunch           : Time-scrunching factor (averaging over time).
 *
 * The pipeline selects rows based on the `coherent_dm` and `subband_dm` values in your filterbank csv file:
 * - If only `coherent_dm` is given, rows with the matching `coherent_dm` will be selected.
 * - If both `coherent_dm` and `subband_dm` are given, `subband_dm` will be used to match rows.
 * - If no values are given, rows starting with `coherent_dm = 0` will run in parallel.
 */

// Dispersion Plan
dd_plan = [
    "0.0:0.0:100.0:1:1",
    "115:109:129:0.5:1",
    "118:109:125:0.5:1",
    "119:109:125:0.5:1",
    "120:110:130:0.5:1",
    "122:112:132:0.5:1"
]


pulsarx{
    nbins_high = 128 //Upper limit of profile bins for slow pulsars (p > 10 ms)
    nbins_low = 64  //Lower limit of profile bins for rest (p < 10 ms)
    nsubband = 64
    subint_length = null //Default value. Tobs/64
    template_file = "${baseDir}/include/fold_templates/meerkat_fold_lband.template"
    clfd_q_value = 2.0
    rfi_filter = ""
    threads = 10
    extra_args = ""

}

candidate_filter {

    candy_picker {
        enable = 1
        period_tolerance = 1e-5
        dm_tolerance = 100.0
    }

    ml_candidate_scoring {
        enable = 1
        models_dir = "${baseDir}/include/ml_models"
        pics_script = "${baseDir}/scripts/pics_classifier_multiple_models.py"
    }

    calculate_post_folding_heuristics {
        enable = 1
        alpha_snr_threshold = 0.0
        script = "${baseDir}/scripts/calculate_alpha_beta_gamma_dmffdot.py"
        //-> Currently supports alpha, beta, gamma and delta.
    }
    
}


folding {
    script = "${baseDir}/scripts/fold_peasoup_candidates.py"
    // Each key is a group name (e.g., "first_run") and the value is a list of configuration dictionaries.
    configuration = [
        first_run: [
            [
                // Parameter ranges for filtering candidates (set 1)
                spin_period: [min: 0.010, max: 0.020], // in seconds
                dm: [min: 100.0, max: 140.0],           // dispersion measure in pc/cm^3
                fft_snr: [min: 5.0, max: 1000.0],         // FFT signal-to-noise ratio
                nh: [min: 0, max: 5],                     // number of summed harmonics
                acc: [min: -5.0, max: 5.0],               // acceleration range
                total_cands_limit: 100                   // max candidates to process in this set
            ],
            [
                // Parameter ranges for filtering candidates (set 2)
                spin_period: [min: 0.001, max: 0.1],
                dm: [min: 100.0, max: 140.0],
                fft_snr: [min: 5.0, max: 1000.0],
                nh: [min: 0, max: 5],
                acc: [min: -50.0, max: 50.0],
                total_cands_limit: 10000
            ]
        ]
    ]

}
   
kafka {
save_search_candidate_uuid = "${baseDir}/generate_uuid_search_candidate.py"
merged_fold_search = "${baseDir}/scripts/merge_fold_candidates_for_kafka.py"
}



}

profiles {
   local {
    includeConfig 'local.config'   
 }
   hercules {
    includeConfig 'hercules.config'
  }
  ozstar {
    includeConfig 'ozstar.config'
  }
  nt {
    includeConfig 'nt.config'
  }
  contra {
    includeConfig 'contra.config'
  }

}



