// Obtain current hostname
def hostname = "hostname".execute().text.trim().replace("-", "")

// Check if this configuration is being loaded on the expected cluster
def expectedHostname = "farnarkle" // 


if (!hostname.startsWith(expectedHostname)) {
    throw new IllegalStateException("""
    ===============================================================
    ERROR: You are trying to run the pipeline on the '${hostname}' cluster
    but the configuration is specifically for the '${expectedHostname}' cluster.
    Please ensure you're using the correct configuration/profile.
    ===============================================================
    """.stripIndent())
}
    
    //Set up apptainer containers and mount path
    apptainer {
        enabled = true
        runOptions = '--env PYTHONNOUSERSITE=1 --nv -B /fred -B $HOME:$HOME'
        envWhitelist = 'APPTAINER_BINDPATH, APPTAINER_LD_LIBRARY_PATH'
    }

    env {
        APPTAINER_IMAGE_PATH = "/fred/oz418/singularity_images"
    }


    params {
        
        hardware = "Ngarrgu"
        publish_dir_prefix = "/fred/oz418/PROCESSING"

        apptainer_images {

        peasoup = "${env.APPTAINER_IMAGE_PATH}/peasoup_keplerian.sif"
        pulsarx = "${env.APPTAINER_IMAGE_PATH}/pulsarx_latest.sif" 
        pics  = "${env.APPTAINER_IMAGE_PATH}/pics_20230630_pics_model_update.sif"
        candy_picker = "${env.APPTAINER_IMAGE_PATH}/candy_picker_latest.sif"

        }
       
    }



   // SLURM Executor for Ngarrgu Tindebeek (NT)

   executor {
        name = 'slurm'               
        pollInterval = '1 min'       // Determines how often to check for process termination. 
        queueSize = 2000               // Maximum number of jobs submitted at once
    }

    process {
        cache = 'lenient'

         withLabel: 'filtool' {
            cpus = 4
            memory = { 4.GB * task.attempt }
            time = { 4.hour * task.attempt }
            clusterOptions = '--tmp=50GB'
            maxForks = 400
            errorStrategy = { task.exitStatus in (137..140) || task.exitStatus == 124 ? 'retry' : 'ignore' }
            maxRetries = 3
            beforeScript   = "module load apptainer"

            // Force scratch = false if local_write = 0 (to prevent double copies)
            if (params.filtool.local_write == 0) {
                scratch = false  
            } 
            else {
                scratch = '$JOBFS'
            }

        }

         withLabel: 'pulsarx' {
            cpus = 10
            memory = { 5.GB * task.attempt }
            time = { 4.hour * task.attempt }
            clusterOptions = '--tmp=3GB'
            scratch = '$JOBFS'
            maxForks = 250
            errorStrategy = { task.exitStatus in (137..140) || task.exitStatus == 124 ? 'retry' : 'ignore' }
            maxRetries = 3
            beforeScript   = "module load apptainer"

        }
	withLabel: 'peasoup' {
            cpus = 1
            memory = { 5.GB * task.attempt}
            clusterOptions = { 
                def part = (task.index % 2 == 0) ? 'skylake-gpu' : 'milan-gpu'
                "--gres=gpu:1 --tmp=2GB -p $part" 
            }
            
            time = { 
                (task.index % 2 == 0 ? 3.days : 12.hours) * task.attempt
            }
            //time = { 3.days * task.attempt }
            //clusterOptions = { Math.random() < 0.5 ? '--gres=gpu:1 --tmp=2GB -p skylake-gpu' : '--gres=gpu:1 --tmp=2GB -p milan-gpu' }
            //clusterOptions = '--gres=gpu:1 --tmp=2GB'
            scratch = '$JOBFS'
            errorStrategy = { task.exitStatus in (137..140) || task.exitStatus == 124 ? 'retry' : 'terminate' }
            maxRetries = 3
            beforeScript   = "module load apptainer"

     	    }

      

        withLabel: 'pics' {
            cpus = 4
            memory = { 4.GB * task.attempt }
            time = { 1.hour * task.attempt }  
            errorStrategy = { task.exitStatus in (137..140) || task.exitStatus == 124 ? 'retry' : 'ignore' }
            maxRetries = 3
            clusterOptions = '--tmp=3GB'
            scratch = '$JOBFS'
            maxForks = 400
            beforeScript   = "module load apptainer"

        }

        withLabel: 'post_folding_heuristics' {
            cpus = 4
            memory = { 3.GB * task.attempt }
            time = { 4.hour * task.attempt }  
            errorStrategy = { task.exitStatus in (137..140) || task.exitStatus == 124 ? 'retry' : 'ignore' }
            maxRetries = 3
            clusterOptions = '--tmp=3GB'
            scratch = '$JOBFS'
            maxForks = 400
            beforeScript   = "module load apptainer"

        }

        withLabel: 'candy_picker' {
            cpus = 2
            memory = 2.GB 
            time = 2.hour 
            errorStrategy = 'terminate'
            clusterOptions = '--tmp=10GB'
            scratch = false // -> DO NOT TURN SCRATCH ON. candy_picker creates dynamic path and is written in a very non-nextflow way for a specific reason. $TMPFS is not supported.
            maxForks = 400
            beforeScript   = "module load apptainer"

        }

    }
